{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from \"shortid\";\nexport var initialState = {\n  mainPost: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"Mia\"\n    },\n    content: \"첫 번째 게시글 #해시태그, #해시태그22\",\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: \"HH\"\n      },\n      content: \"HIII\"\n    }, {\n      User: {\n        nickname: \"JJ\"\n      },\n      content: \"@@@@!!!!!$$$$\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPost: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPost)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      console.log(\"addRequest\", action.data);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        console.log(\"ADD_COMMENT_SUCCESS\", action.data);\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments));\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        }); // const postIndex = state.mainPost.findIndex((v) => v.id === action.data.postId)\n        // const post = { ...state.mainPost[postIndex] }\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments]\n        // const mainPosts = [ ...state.mainPosts]\n        // mainPosts[postIndex] = post;\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addPostLoading: false,\n        //     addPostDone: true,\n        // }\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/ijin-a/Desktop/github-react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPost","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","dummyComment","reducer","state","action","error","console","log","postIndex","mainPosts","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from \"shortid\"\n\nexport const initialState = {\n    mainPost: [{\n        id: 1,\n        User: {\n            id: 1,\n            nickname: \"Mia\"\n        },\n        content: \"첫 번째 게시글 #해시태그, #해시태그22\",\n        Images: [{\n        src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n        }, {\n        src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\n        }, {\n        src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\n        }],\n        Comments: [{\n            User: {\n                nickname: \"HH\",\n            },\n            content: \"HIII\",  \n        },{\n            User: {\n                nickname: \"JJ\",\n            },\n            content: \"@@@@!!!!!$$$$\"\n        }]\n    }],\n    imagePaths: [],\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null\n}\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\"\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\"\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\"\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\"\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\"\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"\n\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data\n});\n\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '제로초',\n    },\n})\n\n\nconst reducer = ( state = initialState, action) => {\n    switch(action.type){\n        case ADD_POST_REQUEST: \n            return {\n                ...state, \n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null\n            }\n        case ADD_POST_SUCCESS: \n            return {\n                ...state,\n                mainPost: [dummyPost(action.data), ...state.mainPost],\n                addPostLoading: false,\n                addPostDone: true,\n            }\n        case ADD_POST_FAILURE: \n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error\n            }\n\n        case ADD_COMMENT_REQUEST: \n            console.log(\"addRequest\", action.data)\n            return {\n                ...state, \n                addCommentLoading: true,\n                addPostDone: false,\n                addPostError: null\n            }\n        case ADD_COMMENT_SUCCESS: {\n            console.log(\"ADD_COMMENT_SUCCESS\", action.data)\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n            const post = { ...state.mainPosts[postIndex] };\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = post;\n            return {\n              ...state,\n              mainPosts,\n              addCommentLoading: false,\n              addCommentDone: true,\n            };\n\n            // const postIndex = state.mainPost.findIndex((v) => v.id === action.data.postId)\n            // const post = { ...state.mainPost[postIndex] }\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments]\n            // const mainPosts = [ ...state.mainPosts]\n            // mainPosts[postIndex] = post;\n            // return {\n            //     ...state,\n            //     mainPosts,\n            //     addPostLoading: false,\n            //     addPostDone: true,\n            // }\n        }\n        case ADD_COMMENT_FAILURE: \n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error\n            }\n        default: \n        return state\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}