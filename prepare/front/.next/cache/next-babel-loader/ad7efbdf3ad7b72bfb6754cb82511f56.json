{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\"; // * 을 붙이지 않는다 !!\n\nfunction logInAPI() {\n  // 실제 서버에 요청을 보낸다. \n  return axios.post(\"/api/login\");\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // takeLatest -> 마우스 두번눌리는 인식되는 경우 앞에 실수로 눌린거는 무시되고 마지막꺼만 살려준다.\n// 완료되지 않은 둘다 로딩중인 상태일때 해당 \n// 치명적 단점 : 요청을 취소하는게 아니라 응답을 취소하는거라 서버쪽에 똑같은 데이터가 연달아 저장되지는 않았는지 검사 필수 ( 요청까지는 취소 X ) , trottle 을 사용해야함  \n// ex yield throttle(\"ADD_POST_REQUEST\", addPost, 10000) -> 10초 동안은 1번만 실행 (시간제한)\n// takeLeading -> 첫번째 이벤트만 \n\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n} // combine reducer 는 필요 없음","map":{"version":3,"sources":["/Users/ijin-a/Desktop/github-react-nodebird/prepare/front/sagas/user.js"],"names":["login","logOut","watchLogIn","watchLogOut","userSaga","all","fork","takeLatest","delay","put","call","axios","logInAPI","post","action","type","data","response","logOutAPI","result"],"mappings":";;oDAUUA,K;qDAuBAC,M;qDAiBAC,U;qDAiBAC,W;qDAKeC,Q;;AAxEzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAGA;;AACA,SAASC,QAAT,GAAqB;AACjB;AACA,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,SAAUb,KAAV,CAAiBc,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AANR;AAAA;AAOQ,iBAAMC,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,WAAD,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAYQ,iBAAMP,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAE,YAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAASE,SAAT,GAAsB;AAClB,SAAOP,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMS,IAAI,CAACQ,SAAD,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGQ,iBAAMV,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,iBADA;AAENC,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMP,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,iBADA;AAENC,YAAAA,IAAI,EAAE,aAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMK,UAAU,CAAC,gBAAD,EAAmBP,KAAnB,CAAhB;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAYA;AACA;AACA;AACA;AACA;;;AACA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAAC,iBAAD,EAAoBN,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACJ,UAAD,CADE,EAENI,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAMf","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n\n// * 을 붙이지 않는다 !!\nfunction logInAPI () {\n    // 실제 서버에 요청을 보낸다. \n    return axios.post(\"/api/login\")\n}\n\nfunction* login (action) {\n    // put : dispatch 같은 역할 : 해당 객체를 dispatch 한다.\n    // call , fork (함수자리, 첫번째 함수자리 이후부터는 인자자리, 인자자리, 인자자리, 인자...)\n    try {\n        // delay -> setTimeout 같은 역할\n        // const result = yield call(logInAPI, action.data)\n        yield delay(1000)\n        yield put({\n            type: \"LOG_IN_SUCCESS\",\n            data: action.data\n        })\n    } catch(err) {\n        yield put({\n            type: \"LOG_IN_FAILURE\",\n            data: err.response.data\n        })\n    }\n    \n}   \nfunction logOutAPI () {\n    return axios.post(\"/api/logout\")\n}\n\nfunction* logOut () {\n    try {\n        const result = yield call(logOutAPI)\n        yield put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n        })\n    } catch(err) {\n        yield put({\n            type: \"LOG_OUT_FAILURE\",\n            data: err.response.data\n        })\n    }\n    \n}   \n\n\nfunction* watchLogIn() {\n    // take : 로그인이라는 액션이 실행될때 까지 기다리겠다. \n    // yield 의 치명적 단점 -> 1회용\n    // -> while 로 감싸면 무한하게 사용 가능 \n    // while take -> 동기적으로 동작\n    // take Every -> 비동기로 동작 \n    // -> while 문 대체 가능 \n\n    yield takeLatest(\"LOG_IN_REQUEST\", login);\n    \n}\n\n// takeLatest -> 마우스 두번눌리는 인식되는 경우 앞에 실수로 눌린거는 무시되고 마지막꺼만 살려준다.\n// 완료되지 않은 둘다 로딩중인 상태일때 해당 \n// 치명적 단점 : 요청을 취소하는게 아니라 응답을 취소하는거라 서버쪽에 똑같은 데이터가 연달아 저장되지는 않았는지 검사 필수 ( 요청까지는 취소 X ) , trottle 을 사용해야함  \n// ex yield throttle(\"ADD_POST_REQUEST\", addPost, 10000) -> 10초 동안은 1번만 실행 (시간제한)\n// takeLeading -> 첫번째 이벤트만 \nfunction* watchLogOut() {\n    yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ])\n}\n// combine reducer 는 필요 없음"]},"metadata":{},"sourceType":"module"}