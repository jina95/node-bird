{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware(); // 배포용일때는 devtool 을 연결 안하고, 개발모드일때만 히스토리가 남는 devtool 연결\n\n  const middlewares = [sagaMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // reducer -> retrun { ...state, ...etc} -> 새로운 객체 반환 ( 변경 내역이 추적 가능하다. -> 이전 기록과 현재 기록이 있기때문에 (현재기록을 변경시켜버리면 추적할 수 없다. ))\n// ...state-> 참조관계 유지 , 메모리를 아낀다 ( 안바뀌는 애들 )\n// { } -> 새로운 객체인것","map":{"version":3,"sources":["/Users/ijin-a/Desktop/github-react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAMA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGJ,oBAAoB,EAA3C,CADyB,CAEzB;;AACA,QAAMK,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GAAG,QAAwCT,OAAO,CAACD,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAA/C,GAAkFN,mBAAmB,CAACH,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAAtH;AACA,QAAME,KAAK,GAAGT,WAAW,CAACG,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACH,CARD;;AAUA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf,C,CAGA;AACA;AACA","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport createSagaMiddleware from \"redux-saga\"\n\nimport reducer from \"../reducers\"\nimport rootSaga from \"../sagas\";\n\n\n\n\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware()\n    // 배포용일때는 devtool 을 연결 안하고, 개발모드일때만 히스토리가 남는 devtool 연결\n    const middlewares = [sagaMiddleware]\n    const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)): composeWithDevTools(applyMiddleware(...middlewares))\n    const store = createStore(reducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga)\n    return store;\n}\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\"})\n\nexport default wrapper;\n\n\n// reducer -> retrun { ...state, ...etc} -> 새로운 객체 반환 ( 변경 내역이 추적 가능하다. -> 이전 기록과 현재 기록이 있기때문에 (현재기록을 변경시켜버리면 추적할 수 없다. ))\n// ...state-> 참조관계 유지 , 메모리를 아낀다 ( 안바뀌는 애들 )\n// { } -> 새로운 객체인것 "]},"metadata":{},"sourceType":"module"}