{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from \"next-redux-wrapper\"; // user -> user의 reducer\n\nimport user from \"./user\";\nimport post from \"./post\"; // reducer 들을 합쳐줌 \n// user, post 의 initialState 는 combineReducers 가 알아서 합쳐준다.\n\nimport { combineReducers } from \"redux\"; // const initialState = {\n//     name: \"Mia\",\n//     age: 27,\n//     password: \"babo\"\n// }\n// action creator\n// const changeName = () => {\n//     return {\n//         type: \"CHANGE_NAME\",\n//     }\n// }\n// changeName(\"BBBil\")\n// (이전상태, 액션) => 다음상태\n\nvar rootReducer = combineReducers({\n  // HYDRATE 를 위해서 아래와 같은 형식을 이용.(SSR을 위해서)\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/ijin-a/Desktop/2021_react_lab/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AACA,IAAMC,WAAW,GAAGD,eAAe,CAAC;AAChC;AACAE,EAAAA,KAAK,EAAG,iBAA0B;AAAA,QAAxBC,KAAwB,uEAAhB,EAAgB;AAAA,QAAZC,MAAY;;AAC9B,YAAOA,MAAM,CAACC,IAAd;AACA,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEJ;AACA,eAAOL,KAAP;AANA;AAQH,GAX+B;AAYhCL,EAAAA,IAAI,EAAJA,IAZgC;AAahCC,EAAAA,IAAI,EAAJA;AAbgC,CAAD,CAAnC;AAiBA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\"\n\n// user -> user의 reducer\nimport user from \"./user\"\nimport post from \"./post\"\n\n// reducer 들을 합쳐줌 \n// user, post 의 initialState 는 combineReducers 가 알아서 합쳐준다.\nimport { combineReducers } from \"redux\";\n\n// const initialState = {\n//     name: \"Mia\",\n//     age: 27,\n//     password: \"babo\"\n// }\n\n// action creator\n// const changeName = () => {\n//     return {\n//         type: \"CHANGE_NAME\",\n//     }\n// }\n\n// changeName(\"BBBil\")\n\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = combineReducers({\n    // HYDRATE 를 위해서 아래와 같은 형식을 이용.(SSR을 위해서)\n    index : ( state = {}, action ) => {\n        switch(action.type) {\n        case HYDRATE : \n            console.log(\"HYDRATE\", action)\n            return { ...state, ...action.payload}\n        \n        default :\n        return state\n        }\n    },\n    user,\n    post,\n})\n    \n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}