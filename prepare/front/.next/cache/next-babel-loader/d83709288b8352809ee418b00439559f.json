{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from \"../reducers/user\"; // * 을 붙이지 않는다 !!\n\nfunction logInAPI() {\n  // 실제 서버에 요청을 보낸다. \n  return axios.post(\"/api/login\");\n}\n\nfunction* login(action) {\n  // put : dispatch 같은 역할 : 해당 객체를 dispatch 한다.\n  // call , fork (함수자리, 첫번째 함수자리 이후부터는 인자자리, 인자자리, 인자자리, 인자...)\n  try {\n    // delay -> setTimeout 같은 역할\n    // const result = yield call(logInAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  // take : 로그인이라는 액션이 실행될때 까지 기다리겠다. \n  // yield 의 치명적 단점 -> 1회용\n  // -> while 로 감싸면 무한하게 사용 가능 \n  // while take -> 동기적으로 동작\n  // take Every -> 비동기로 동작 \n  // -> while 문 대체 가능 \n  yield takeLatest(LOG_IN_REQUEST, login);\n} // takeLatest -> 마우스 두번눌리는 인식되는 경우 앞에 실수로 눌린거는 무시되고 마지막꺼만 살려준다.\n// 완료되지 않은 둘다 로딩중인 상태일때 해당 \n// 치명적 단점 : 요청을 취소하는게 아니라 응답을 취소하는거라 서버쪽에 똑같은 데이터가 연달아 저장되지는 않았는지 검사 필수 ( 요청까지는 취소 X ) , trottle 을 사용해야함  \n// ex yield throttle(\"ADD_POST_REQUEST\", addPost, 10000) -> 10초 동안은 1번만 실행 (시간제한)\n// takeLeading -> 첫번째 이벤트만 \n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n} // combine reducer 는 필요 없음","map":{"version":3,"sources":["/Users/ijin-a/Desktop/github-react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","call","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","logInAPI","post","login","action","type","data","err","error","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH,C,CAGA;;AACA,SAASC,QAAT,GAAqB;AACjB;AACA,SAAOP,KAAK,CAACQ,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUC,KAAV,CAAiBC,MAAjB,EAAyB;AACrB;AACA;AACA,MAAI;AACA;AACA;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAER,cADA;AAENS,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAMC,GAAN,EAAW;AACT,UAAMf,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEV,cADA;AAENa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AAEJ;;AACD,SAASI,SAAT,GAAsB;AAClB,SAAOhB,KAAK,CAACQ,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAoB;AAChB,MAAI;AACA;AACC,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACD,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEL,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMO,GAAN,EAAW;AACT,UAAMf,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEP,eADA;AAENU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AAEJ;;AAGD,UAAUM,UAAV,GAAuB;AACnB;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMtB,UAAU,CAACM,cAAD,EAAiBO,KAAjB,CAAhB;AAEH,C,CAED;AACA;AACA;AACA;AACA;;;AACA,UAAUU,WAAV,GAAwB;AACpB,QAAMvB,UAAU,CAACS,eAAD,EAAkBY,MAAlB,CAAhB;AACH;;AAGD,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAM1B,GAAG,CAAC,CACNC,IAAI,CAACuB,UAAD,CADE,EAENvB,IAAI,CAACwB,WAAD,CAFE,CAAD,CAAT;AAIH,C,CACD","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from \"../reducers/user\"\n\n\n// * 을 붙이지 않는다 !!\nfunction logInAPI () {\n    // 실제 서버에 요청을 보낸다. \n    return axios.post(\"/api/login\")\n}\n\nfunction* login (action) {\n    // put : dispatch 같은 역할 : 해당 객체를 dispatch 한다.\n    // call , fork (함수자리, 첫번째 함수자리 이후부터는 인자자리, 인자자리, 인자자리, 인자...)\n    try {\n        // delay -> setTimeout 같은 역할\n        // const result = yield call(logInAPI, action.data)\n        yield delay(1000)\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n        })\n    } catch(err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data\n        })\n    }\n    \n}   \nfunction logOutAPI () {\n    return axios.post(\"/api/logout\")\n}\n\nfunction* logOut () {\n    try {\n        // const result = yield call(logOutAPI)\n         yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n            // data: result.data\n        })\n    } catch(err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data\n        })\n    }\n    \n}   \n\n\nfunction* watchLogIn() {\n    // take : 로그인이라는 액션이 실행될때 까지 기다리겠다. \n    // yield 의 치명적 단점 -> 1회용\n    // -> while 로 감싸면 무한하게 사용 가능 \n    // while take -> 동기적으로 동작\n    // take Every -> 비동기로 동작 \n    // -> while 문 대체 가능 \n\n    yield takeLatest(LOG_IN_REQUEST, login);\n    \n}\n\n// takeLatest -> 마우스 두번눌리는 인식되는 경우 앞에 실수로 눌린거는 무시되고 마지막꺼만 살려준다.\n// 완료되지 않은 둘다 로딩중인 상태일때 해당 \n// 치명적 단점 : 요청을 취소하는게 아니라 응답을 취소하는거라 서버쪽에 똑같은 데이터가 연달아 저장되지는 않았는지 검사 필수 ( 요청까지는 취소 X ) , trottle 을 사용해야함  \n// ex yield throttle(\"ADD_POST_REQUEST\", addPost, 10000) -> 10초 동안은 1번만 실행 (시간제한)\n// takeLeading -> 첫번째 이벤트만 \nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n    ])\n}\n// combine reducer 는 필요 없음"]},"metadata":{},"sourceType":"module"}