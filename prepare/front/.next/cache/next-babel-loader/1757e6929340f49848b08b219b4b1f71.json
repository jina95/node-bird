{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport reducer from \"../reducers/index\"; // configureStore.js\n\nconst configureStore = () => {\n  // 배포용일때는 devtool 을 연결 안하고, 개발모드일때만 히스토리가 남는 devtool 연결\n  const middlewares = [thunkMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // reducer -> retrun { ...state, ...etc} -> 새로운 객체 반환 ( 변경 내역이 추적 가능하다. -> 이전 기록과 현재 기록이 있기때문에 (현재기록을 변경시켜버리면 추적할 수 없다. ))\n// ...state-> 참조관계 유지 , 메모리를 아낀다 ( 안바뀌는 애들 )\n// { } -> 새로운 객체인것","map":{"version":3,"sources":["/Users/ijin-a/Desktop/github-react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","thunkMiddleware","reducer","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,mBAApB,C,CAEA;;AACA,MAAMC,cAAc,GAAG,MAAM;AACzB;AACA,QAAMC,WAAW,GAAG,CAACH,eAAD,CAApB;AACA,QAAMI,QAAQ,GAAG,QAAwCP,OAAO,CAACD,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAA/C,GAAkFJ,mBAAmB,CAACH,eAAe,CAAC,GAAGO,WAAJ,CAAhB,CAAtH;AACA,QAAME,KAAK,GAAGP,WAAW,CAACG,OAAD,EAAUG,QAAV,CAAzB;AACA,SAAOC,KAAP;AACH,CAND;;AAQA,MAAMC,OAAO,GAAGX,aAAa,CAACO,cAAD,EAAiB;AAAEK,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf,C,CAGA;AACA;AACA","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport thunkMiddleware from \"redux-thunk\"\n\nimport reducer from \"../reducers/index\"\n\n// configureStore.js\nconst configureStore = () => {\n    // 배포용일때는 devtool 을 연결 안하고, 개발모드일때만 히스토리가 남는 devtool 연결\n    const middlewares = [thunkMiddleware]\n    const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)): composeWithDevTools(applyMiddleware(...middlewares))\n    const store = createStore(reducer, enhancer);\n    return store;\n}\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === \"development\"})\n\nexport default wrapper;\n\n\n// reducer -> retrun { ...state, ...etc} -> 새로운 객체 반환 ( 변경 내역이 추적 가능하다. -> 이전 기록과 현재 기록이 있기때문에 (현재기록을 변경시켜버리면 추적할 수 없다. ))\n// ...state-> 참조관계 유지 , 메모리를 아낀다 ( 안바뀌는 애들 )\n// { } -> 새로운 객체인것 "]},"metadata":{},"sourceType":"module"}